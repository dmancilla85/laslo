/*
 * Copyright (C) 2018 David
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.laslo.gui;

import com.laslo.core.LoopMatcher;
import com.tools.io.GenBankID;
import com.tools.io.InputSequence;
import static com.tools.io.InputSequence.BIOMART;
import static com.tools.io.InputSequence.ENSEMBL;
import static com.tools.io.InputSequence.FLYBASE;
import static com.tools.io.InputSequence.GENERIC;
import static java.awt.EventQueue.invokeLater;
import java.awt.event.WindowEvent;
import static java.awt.event.WindowEvent.WINDOW_CLOSING;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import static java.lang.System.exit;
import static java.lang.System.setErr;
import static java.lang.System.setOut;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import static java.util.Arrays.asList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import static java.util.ResourceBundle.getBundle;
import static java.util.logging.Level.SEVERE;
import static java.util.logging.Logger.getLogger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import static javax.swing.JFileChooser.DIRECTORIES_ONLY;
import static javax.swing.JFileChooser.FILES_AND_DIRECTORIES;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author David A. Mancilla
 */
public class GUIFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     *
     * @throws java.io.IOException
     */
    public GUIFrame() throws IOException {
        loopMatcher = new LoopMatcher();
        isRunning = false;
        this.locale = new Locale("en", "US");
        this.bundle = getBundle("resources/Bundle", locale);
        initComponents();
        this.jRBen_EN.setSelected(true);
        this.jRBes_AR.setSelected(false);
        this.jLblError.setText("");
        this.jftNumberOfRandoms.setValue(10);
        this.jftkLet.setValue(2);
        //this.fromLocalPath = true;
        this.jSpinMismatch.setVisible(false);
        this.jSpinWooble.setVisible(false);
        this.jLblWoobles.setVisible(false);
        this.jLblMismatchs.setVisible(false);
        this.jcbSearchInverse.setSelected(false);
        this.jcbExtended.setSelected(false);
        this.jcbExtended.setVisible(true); // temporario
        this.jcbMakeRandoms.setSelected(false);
        this.jProgressBar1.setMinimum(0);
        this.jProgressBar1.setMaximum(100);
        this.jProgressBar1.setStringPainted(true);
        this.jTabInput.setSelectedIndex(0);
        this.geneList = new ArrayList<>();

        TextAreaOutputStream taos = new TextAreaOutputStream(jTAConsole);
        PrintStream ps = new PrintStream(taos);
        setOut(ps);
        setErr(ps);
        
        if(!checkExternalFiles()){
            MessageBox.show("Missing external executables, check the EXT folder.","ERROR");
            System.exit(0b1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanOutput = new javax.swing.JPanel();
        jcbMakeRandoms = new javax.swing.JCheckBox();
        jcbExtended = new javax.swing.JCheckBox();
        jLblNRand = new javax.swing.JLabel();
        jftNumberOfRandoms = new javax.swing.JFormattedTextField();
        jLblNKlet = new javax.swing.JLabel();
        jftkLet = new javax.swing.JFormattedTextField();
        jLblDestiny = new javax.swing.JLabel();
        jTFPathOut = new javax.swing.JTextField();
        jButtonOut = new javax.swing.JButton();
        jPanOptions = new javax.swing.JPanel();
        jLblStemBetween = new javax.swing.JLabel();
        jSpinMinLength = new javax.swing.JSpinner();
        jSpinMaxLength = new javax.swing.JSpinner();
        jLblWoobles = new javax.swing.JLabel();
        jSpinWooble = new javax.swing.JSpinner();
        jLblMismatchs = new javax.swing.JLabel();
        jSpinMismatch = new javax.swing.JSpinner();
        jLblInput = new javax.swing.JLabel();
        jcbSearchInverse = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTALoopPatterns = new javax.swing.JTextArea();
        jftAdditionalSeq = new javax.swing.JFormattedTextField();
        jlSingleSequence = new javax.swing.JLabel();
        jPanConsole = new javax.swing.JPanel();
        jBtnStart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAConsole = new javax.swing.JTextArea();
        jLblError = new javax.swing.JLabel();
        jBtnStop = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jTabInput = new javax.swing.JTabbedPane();
        jPanFile = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTFPathIn = new javax.swing.JTextField();
        jButtonIn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanOnline = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTAGenes = new javax.swing.JTextArea();
        jrbNcbi = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMIExit = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jRBen_EN = new javax.swing.JRadioButtonMenuItem();
        jRBes_AR = new javax.swing.JRadioButtonMenuItem();
        jMIAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("LASLO");
        setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        setIconImage(new ImageIcon(getClass().getResource("/resources/noun_655767_cc.png")).getImage());
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(533, 437));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jcbMakeRandoms.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        //java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("resources/Bundle"); // NOI18N
        jcbMakeRandoms.setText(bundle.getString("RANDOMIZE_CHECK")); // NOI18N
        jcbMakeRandoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMakeRandomsActionPerformed(evt);
            }
        });

        jcbExtended.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jcbExtended.setText(bundle.getString("EXTENDED_MODE_CHECK")); // NOI18N
        jcbExtended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbExtendedActionPerformed(evt);
            }
        });

        jLblNRand.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLblNRand.setText(bundle.getString("RANDOM_NUMBERS")); // NOI18N
        jLblNRand.setEnabled(false);

        jftNumberOfRandoms.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jftNumberOfRandoms.setEnabled(false);

        jLblNKlet.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLblNKlet.setText(bundle.getString("RANDOM_K")); // NOI18N
        jLblNKlet.setEnabled(false);

        jftkLet.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jftkLet.setEnabled(false);
        jftkLet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jftkLetActionPerformed(evt);
            }
        });

        jLblDestiny.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLblDestiny.setText(bundle.getString("DESTINATION")); // NOI18N

        jTFPathOut.setEditable(false);
        jTFPathOut.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jTFPathOut.setToolTipText(bundle.getString("DESTINATION_TOOLTIP")); // NOI18N
        jTFPathOut.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTFPathOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFPathOutActionPerformed(evt);
            }
        });

        jButtonOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/noun_53223_cc.png"))); // NOI18N
        jButtonOut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanOutputLayout = new javax.swing.GroupLayout(jPanOutput);
        jPanOutput.setLayout(jPanOutputLayout);
        jPanOutputLayout.setHorizontalGroup(
            jPanOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanOutputLayout.createSequentialGroup()
                        .addGroup(jPanOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbMakeRandoms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbExtended, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addComponent(jLblNRand, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jftNumberOfRandoms, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLblNKlet, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanOutputLayout.createSequentialGroup()
                        .addComponent(jLblDestiny)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFPathOut)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jftkLet, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOut))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanOutputLayout.setVerticalGroup(
            jPanOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLblDestiny)
                        .addComponent(jTFPathOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonOut, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbMakeRandoms)
                    .addComponent(jLblNRand)
                    .addComponent(jftNumberOfRandoms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblNKlet)
                    .addComponent(jftkLet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbExtended)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLblNRand.getAccessibleContext().setAccessibleName("");
        jLblNKlet.getAccessibleContext().setAccessibleName("k-let");

        jPanOptions.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLblStemBetween.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLblStemBetween.setText(bundle.getString("STEM_LENGTH_BETWEEN")); // NOI18N

        jSpinMinLength.setPreferredSize(new java.awt.Dimension(35, 22));
        jSpinMinLength.setValue(4);
        jSpinMinLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinMinLengthStateChanged(evt);
            }
        });

        jSpinMaxLength.setMinimumSize(new java.awt.Dimension(35, 30));
        jSpinMaxLength.setPreferredSize(new java.awt.Dimension(45, 22));
        jSpinMaxLength.setValue(12);
        jSpinMaxLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinMaxLengthStateChanged(evt);
            }
        });

        jLblWoobles.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLblWoobles.setText(bundle.getString("WOOBLE_ALLOWED_TO")); // NOI18N

        jSpinWooble.setPreferredSize(new java.awt.Dimension(35, 22));
        jSpinWooble.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinWoobleStateChanged(evt);
            }
        });

        jLblMismatchs.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLblMismatchs.setText(bundle.getString("MISMATCHS_ALLOWED_TO")); // NOI18N

        jSpinMismatch.setPreferredSize(new java.awt.Dimension(35, 22));
        jSpinMismatch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinMismatchStateChanged(evt);
            }
        });

        jLblInput.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLblInput.setText(bundle.getString("ENTER_THE_LOOPS")); // NOI18N

        jcbSearchInverse.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jcbSearchInverse.setText(bundle.getString("INVERSE_PATTERN")); // NOI18N
        jcbSearchInverse.setActionCommand("");
        jcbSearchInverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSearchInverseActionPerformed(evt);
            }
        });

        jTALoopPatterns.setColumns(20);
        jTALoopPatterns.setFont(new java.awt.Font("Calibri Light", 0, 12)); // NOI18N
        jTALoopPatterns.setRows(3);
        jTALoopPatterns.setTabSize(2);
        jTALoopPatterns.setText("CNGG, CNGGN, CNGGNN, CNGGNNN, CNGGNNNN");
        jTALoopPatterns.setToolTipText(bundle.getString("ENTER_LOOP_TOOLTIP")); // NOI18N
        jTALoopPatterns.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setViewportView(jTALoopPatterns);

        jftAdditionalSeq.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        try {
            jftAdditionalSeq.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("UUUUUUUUUUUUUU")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftAdditionalSeq.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jftAdditionalSeq.setToolTipText(bundle.getString("ADDITION_SEQ_TOOLTIP"));
        jftAdditionalSeq.setAutoscrolls(false);
        jftAdditionalSeq.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jftAdditionalSeq.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jftAdditionalSeq.setVerifyInputWhenFocusTarget(false);
        jftAdditionalSeq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jftAdditionalSeqActionPerformed(evt);
            }
        });

        jlSingleSequence.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jlSingleSequence.setText(bundle.getString("ADDITIONAL_SEQ")); // NOI18N

        javax.swing.GroupLayout jPanOptionsLayout = new javax.swing.GroupLayout(jPanOptions);
        jPanOptions.setLayout(jPanOptionsLayout);
        jPanOptionsLayout.setHorizontalGroup(
            jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanOptionsLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanOptionsLayout.createSequentialGroup()
                        .addComponent(jLblStemBetween, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinMinLength, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(252, 252, 252))
                    .addGroup(jPanOptionsLayout.createSequentialGroup()
                        .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanOptionsLayout.createSequentialGroup()
                                .addComponent(jLblWoobles, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinWooble, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLblInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbSearchInverse, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanOptionsLayout.createSequentialGroup()
                                .addComponent(jLblMismatchs, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jSpinMismatch, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanOptionsLayout.createSequentialGroup()
                        .addComponent(jlSingleSequence, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jftAdditionalSeq, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanOptionsLayout.setVerticalGroup(
            jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanOptionsLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblStemBetween)
                    .addComponent(jSpinMinLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLblMismatchs)
                        .addComponent(jSpinMismatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLblWoobles)
                        .addComponent(jSpinWooble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblInput)
                    .addComponent(jcbSearchInverse, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlSingleSequence)
                    .addComponent(jftAdditionalSeq, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLblInput.getAccessibleContext().setAccessibleName("");

        jBtnStart.setText(bundle.getString("START")); // NOI18N
        jBtnStart.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBtnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnStartActionPerformed(evt);
            }
        });

        jTAConsole.setEditable(false);
        jTAConsole.setBackground(new java.awt.Color(51, 51, 51));
        jTAConsole.setColumns(20);
        jTAConsole.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jTAConsole.setForeground(new java.awt.Color(255, 255, 255));
        jTAConsole.setLineWrap(true);
        jTAConsole.setRows(5);
        jTAConsole.setToolTipText("");
        jTAConsole.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("OUTPUT_TITLE"))); // NOI18N
        jTAConsole.setFocusable(false);
        jTAConsole.setVerifyInputWhenFocusTarget(false);
        jScrollPane2.setViewportView(jTAConsole);
        jTAConsole.getAccessibleContext().setAccessibleName(bundle.getString("MONITOR")); // NOI18N

        jLblError.setFont(new java.awt.Font("Calibri", 2, 14)); // NOI18N
        jLblError.setForeground(new java.awt.Color(255, 0, 0));
        jLblError.setText(bundle.getString("ERROR")); // NOI18N

        jBtnStop.setText(bundle.getString("STOP_BTN")); // NOI18N
        jBtnStop.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jBtnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnStopActionPerformed(evt);
            }
        });

        jProgressBar1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jProgressBar1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanConsoleLayout = new javax.swing.GroupLayout(jPanConsole);
        jPanConsole.setLayout(jPanConsoleLayout);
        jPanConsoleLayout.setHorizontalGroup(
            jPanConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanConsoleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanConsoleLayout.createSequentialGroup()
                        .addGroup(jPanConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanConsoleLayout.createSequentialGroup()
                                .addComponent(jBtnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLblError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanConsoleLayout.setVerticalGroup(
            jPanConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanConsoleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnStart)
                    .addComponent(jLblError)
                    .addComponent(jBtnStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabInput.setBackground(javax.swing.UIManager.getDefaults().getColor("windowBorder"));
        jTabInput.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTabInput.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabInputStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel4.setText(bundle.getString("PATH")); // NOI18N

        jTFPathIn.setEditable(false);
        jTFPathIn.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jTFPathIn.setToolTipText(bundle.getString("PATH_TOOLTIP")); // NOI18N
        jTFPathIn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTFPathIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFPathInActionPerformed(evt);
            }
        });

        jButtonIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/noun_53223_cc.png"))); // NOI18N
        jButtonIn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Calibri Light", 0, 12)); // NOI18N
        jLabel7.setText(bundle.getString("DESCRIPTION")); // NOI18N
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanFileLayout = new javax.swing.GroupLayout(jPanFile);
        jPanFile.setLayout(jPanFileLayout);
        jPanFileLayout.setHorizontalGroup(
            jPanFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanFileLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(22, 22, 22)
                        .addComponent(jTFPathIn, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonIn)
                        .addGap(4, 4, 4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanFileLayout.setVerticalGroup(
            jPanFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jTFPathIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonIn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabInput.addTab(bundle.getString("TAB_FILE"), jPanFile); // NOI18N

        jTAGenes.setColumns(20);
        jTAGenes.setFont(new java.awt.Font("Calibri Light", 0, 12)); // NOI18N
        jTAGenes.setRows(5);
        jScrollPane3.setViewportView(jTAGenes);

        jrbNcbi.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jrbNcbi.setSelected(true);
        jrbNcbi.setText("NCBI");

        jLabel8.setFont(new java.awt.Font("Calibri Light", 0, 12)); // NOI18N
        jLabel8.setText(bundle.getString("NCBI_DESC")); // NOI18N

        javax.swing.GroupLayout jPanOnlineLayout = new javax.swing.GroupLayout(jPanOnline);
        jPanOnline.setLayout(jPanOnlineLayout);
        jPanOnlineLayout.setHorizontalGroup(
            jPanOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanOnlineLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanOnlineLayout.createSequentialGroup()
                        .addComponent(jrbNcbi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanOnlineLayout.setVerticalGroup(
            jPanOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanOnlineLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbNcbi)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabInput.addTab(bundle.getString("TAB_WEB"), jPanOnline); // NOI18N

        jMenuFile.setText(bundle.getString("FILE")); // NOI18N
        jMenuFile.setToolTipText("");

        jMIExit.setText(bundle.getString("EXIT")); // NOI18N
        jMIExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMIExit);

        jMenuBar1.add(jMenuFile);

        jMenuHelp.setText(bundle.getString("HELP")); // NOI18N

        jRBen_EN.setSelected(true);
        jRBen_EN.setText("English");
        jRBen_EN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBen_ENActionPerformed(evt);
            }
        });
        jMenuHelp.add(jRBen_EN);

        jRBes_AR.setSelected(true);
        jRBes_AR.setText("Spanish");
        jRBes_AR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBes_ARActionPerformed(evt);
            }
        });
        jMenuHelp.add(jRBes_AR);

        jMIAbout.setText(bundle.getString("ABOUT")); // NOI18N
        jMIAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMIAbout);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanConsole, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabInput))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabInput, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanConsole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabInput.getAccessibleContext().setAccessibleName("");
        jTabInput.getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTFPathInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFPathInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFPathInActionPerformed

    private void jTFPathOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFPathOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFPathOutActionPerformed

    private void jButtonOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser();
        JFrame myFrame = new JFrame();
        File folder = null;

        // In response to a button click:
        fc.setFileSelectionMode(DIRECTORIES_ONLY);
        int returnVal = fc.showDialog(myFrame, bundle.getString("DESTINATION_FC_MSG"));

        if (APPROVE_OPTION == returnVal) {
            folder = fc.getSelectedFile();
        }

        if (folder != null) {
            this.jTFPathOut.setText(folder.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonOutActionPerformed

    private void jMIExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIExitActionPerformed
        // TODO add your handling code here:
        this.dispatchEvent(new WindowEvent(this, WINDOW_CLOSING));
    }//GEN-LAST:event_jMIExitActionPerformed

    private void jBtnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnStartActionPerformed
        // TODO add your handling code here:
        // Llamar a método unificador
        this.start();
    }//GEN-LAST:event_jBtnStartActionPerformed

    private void jSpinMinLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinMinLengthStateChanged
        // TODO add your handling code here:
        if (new Integer(this.jSpinMinLength.getValue().toString()) < 3) {
            this.jSpinMinLength.setValue(3);
        }
    }//GEN-LAST:event_jSpinMinLengthStateChanged

    private void jSpinWoobleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinWoobleStateChanged
        // TODO add your handling code here:
        // TODO add your handling code here:
        int aux = new Integer(this.jSpinWooble.getValue().toString());
        int max = new Integer(this.jSpinMaxLength.getValue().toString());

        if (aux < 0) {
            this.jSpinWooble.setValue(0);
        } else if (aux > max) {
            this.jSpinWooble.setValue(max);
        }
    }//GEN-LAST:event_jSpinWoobleStateChanged

    private void jSpinMismatchStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinMismatchStateChanged
        // TODO add your handling code here:
        int aux = new Integer(this.jSpinMismatch.getValue().toString());
        int max = new Integer(this.jSpinMaxLength.getValue().toString());

        if (aux < 0) {
            this.jSpinMismatch.setValue(0);
        } else if (aux > max) {
            this.jSpinMismatch.setValue(max);
        }
    }//GEN-LAST:event_jSpinMismatchStateChanged

    private void jSpinMaxLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinMaxLengthStateChanged
        // TODO add your handling code here:
        int aux = new Integer(this.jSpinMaxLength.getValue().toString());
        int min = new Integer(this.jSpinMinLength.getValue().toString());

        if (aux < min) {
            this.jSpinMaxLength.setValue(min);
        }
    }//GEN-LAST:event_jSpinMaxLengthStateChanged

    private void jButtonInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser();
        JFrame myFrame = new JFrame();
        File file;
        boolean isFolder;
        this.listOfFiles = null;

        // In response to a button click:
        fc.setFileSelectionMode(FILES_AND_DIRECTORIES);
        int returnVal = fc.showDialog(myFrame, bundle.getString("PATH_FC_MSG"));

        if (returnVal == APPROVE_OPTION) {
            file = fc.getSelectedFile();
            isFolder = file.isDirectory();
        } else {
            return;
        }

        if (file.exists()) {
            if (isFolder) {
                this.listOfFiles = file.listFiles();
                this.jTFPathOut.setText(file.getAbsolutePath());
            } else {
                this.listOfFiles = new File[1];
                this.listOfFiles[0] = file;
                this.jTFPathOut.setText(file.getParent());
            }
            this.jTFPathIn.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonInActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        /*if (this.isRunning) {
            MessageBox.show(bundle.getString("CANT_EXIT_WHILE_RUNNING")
                    + bundle.getString("PROCESS_IS_RUNNING"), bundle.getString("PROCESS_RUNNING_MSG_TITLE"));

        } else { */
        exit(0);
        //}
    }//GEN-LAST:event_formWindowClosing

    private void jcbExtendedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbExtendedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbExtendedActionPerformed

    private void jcbMakeRandomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMakeRandomsActionPerformed
        // TODO add your handling code here:
        boolean val = jcbMakeRandoms.isSelected();
        this.jLblNRand.setEnabled(val);
        this.jftNumberOfRandoms.setEnabled(val);
        this.jLblNKlet.setEnabled(val);
        this.jftkLet.setEnabled(val);
    }//GEN-LAST:event_jcbMakeRandomsActionPerformed

    private void jRBes_ARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBes_ARActionPerformed
        // TODO add your handling code here:
        this.jRBen_EN.setSelected(false);
        this.locale = new Locale("es", "ES");
    }//GEN-LAST:event_jRBes_ARActionPerformed

    private void jRBen_ENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBen_USActionPerformed
        // TODO add your handling code here:
        jRBes_AR.setSelected(false);
        this.locale = new Locale("en", "US");
    }//GEN-LAST:event_jRBen_USActionPerformed

    private void jcbSearchInverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSearchInverseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbSearchInverseActionPerformed

    private void jftkLetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jftkLetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jftkLetActionPerformed

    private void jftAdditionalSeqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jftAdditionalSeqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jftAdditionalSeqActionPerformed

    private void jMIAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAboutActionPerformed
        // TODO add your handling code here:
        AboutFrame af = new AboutFrame();

        af.setVisible(true);
    }//GEN-LAST:event_jMIAboutActionPerformed

    private void jTabInputStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabInputStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabInputStateChanged

    private void jBtnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnStopActionPerformed
        // TODO add your handling code here:
        if (worker != null) {
            if (!worker.isCancelled() && !worker.isDone()) {
                worker.cancel(true);
                jProgressBar1.setValue(0);
                setIsRunning(false);
            }
        }

    }//GEN-LAST:event_jBtnStopActionPerformed

    private void jProgressBar1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jProgressBar1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jProgressBar1PropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        try {
            // Set cross-platform Java L&F (also called "Metal")
            UIManager.setLookAndFeel(
                    UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException
                | InstantiationException | UnsupportedLookAndFeelException ex) {
        }
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        invokeLater(() -> {
            try {
                new GUIFrame().setVisible(true);
            } catch (IOException ex) {
                getLogger(GUIFrame.class.getName()).log(SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnStart;
    private javax.swing.JButton jBtnStop;
    private javax.swing.JButton jButtonIn;
    private javax.swing.JButton jButtonOut;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLblDestiny;
    private javax.swing.JLabel jLblError;
    private javax.swing.JLabel jLblInput;
    private javax.swing.JLabel jLblMismatchs;
    private javax.swing.JLabel jLblNKlet;
    private javax.swing.JLabel jLblNRand;
    private javax.swing.JLabel jLblStemBetween;
    private javax.swing.JLabel jLblWoobles;
    private javax.swing.JMenuItem jMIAbout;
    private javax.swing.JMenuItem jMIExit;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JPanel jPanConsole;
    private javax.swing.JPanel jPanFile;
    private javax.swing.JPanel jPanOnline;
    private javax.swing.JPanel jPanOptions;
    private javax.swing.JPanel jPanOutput;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButtonMenuItem jRBen_EN;
    private javax.swing.JRadioButtonMenuItem jRBes_AR;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinMaxLength;
    private javax.swing.JSpinner jSpinMinLength;
    private javax.swing.JSpinner jSpinMismatch;
    private javax.swing.JSpinner jSpinWooble;
    private javax.swing.JTextArea jTAConsole;
    private javax.swing.JTextArea jTAGenes;
    private javax.swing.JTextArea jTALoopPatterns;
    private javax.swing.JTextField jTFPathIn;
    private javax.swing.JTextField jTFPathOut;
    private javax.swing.JTabbedPane jTabInput;
    private javax.swing.JCheckBox jcbExtended;
    private javax.swing.JCheckBox jcbMakeRandoms;
    private javax.swing.JCheckBox jcbSearchInverse;
    private javax.swing.JFormattedTextField jftAdditionalSeq;
    private javax.swing.JFormattedTextField jftNumberOfRandoms;
    private javax.swing.JFormattedTextField jftkLet;
    private javax.swing.JLabel jlSingleSequence;
    private javax.swing.JRadioButton jrbNcbi;
    // End of variables declaration//GEN-END:variables

    private Locale locale;
    private final ResourceBundle bundle;
    private final LoopMatcher loopMatcher;
    private File[] listOfFiles;
    private boolean isRunning;
    private ArrayList<String> geneList;
    private GUISwingWorker worker;
    private String pathIn;
    private String pathOut;

    /**
     *
     * @param value
     */
    public void setInputSequence(String value) {
        InputSequence origin;
        //String fs = "";
        //String cols = "0";

        switch (value) {
            case "Ensembl":
                origin = ENSEMBL;
                break;
            case "FlyBase":
                origin = FLYBASE;
                break;
            case "BioMart":
                origin = BIOMART;
                break;
            default:
                origin = GENERIC;
        }

        this.loopMatcher.setInputType(origin);
    }

    /**
     *
     * @param value
     */
    public void setIsRunning(boolean value) {
        this.isRunning = value;
        this.jBtnStart.setEnabled(!value);
        this.jLblError.setText("");
        this.jBtnStop.setEnabled(value);
    }

    /**
     *
     * @param min
     * @param max
     * @param wooble
     * @param mismatch
     * @param pathIn
     * @param pathOut
     * @param loopList
     * @param geneList
     * @param randoms
     * @param klet
     * @return
     */
    public boolean validateParameters(int min, int max, int wooble,
            int mismatch, String pathIn, String pathOut,
            ArrayList<String> loopList, ArrayList<String> geneList,
            int randoms, int klet) {
        boolean isValid;
        isValid = true;
        String aux;

        // Validate numbers
        if (min > max || wooble > max || mismatch > max
                || min < 3 || wooble < 0 || mismatch < 0) {
            this.jLblError.setText(bundle.getString("ERROR_PARAM"));
            MessageBox.show(bundle.getString("ERROR_PARAM"), "Error");
            isValid = false;
        }

        if (jTabInput.getSelectedIndex() == 1) {
            if (!netIsAvailable()) {
                isValid = false;
                this.jLblError.setText(bundle.getString("NO_NET_CONNECTION"));
                MessageBox.show(bundle.getString("NO_NET_CONNECTION"), "Error");
                return isValid;
            }

            //geneList.addAll(asList(txtTemp.split(",")));
            for (int i = 0; i < geneList.size() && isValid; i++) {
                aux = geneList.get(i);
                aux = aux.trim();
                if (aux.length() <= 0) {
                    isValid = false;
                    this.jLblError.setText(bundle.getString("ERROR_CHECK_GENES"));
                    MessageBox.show(bundle.getString("ERROR_CHECK_GENES"), "Error");
                    return isValid;
                }
            }

        } else {
            if (!new File(pathIn).exists()) {
                this.jLblError.setText(bundle.getString("ERROR_SOURCE"));
                MessageBox.show(bundle.getString("ERROR_SOURCE"), "Error");
                isValid = false;
            }
        }

        // Validate destiny
        if (!new File(pathOut).exists()) {
            this.jLblError.setText(bundle.getString("ERROR_DEST_FOLDER"));
            MessageBox.show(bundle.getString("ERROR_DEST_FOLDER"), "Error");
            isValid = false;
        }

        if (loopList.size() <= 0 || loopList.get(0).trim().length() == 0) {
            this.jLblError.setText(bundle.getString("ERROR_LOOPS"));
            MessageBox.show(bundle.getString("ERROR_LOOPS"), "Error");
            isValid = false;
        }

        for (int i = 0; i < loopList.size() && isValid; i++) {
            aux = loopList.get(i);
            aux = aux.trim();
            if (aux.length() <= 0) {
                isValid = false;
                this.jLblError.setText(bundle.getString("ERROR_CHECK_LOOPS"));
                MessageBox.show(bundle.getString("ERROR_CHECK_LOOPS"), "Error");
            }
        }

        if (this.jcbMakeRandoms.isSelected()) {
            if (randoms <= 0) {
                this.jLblError.setText(bundle.getString("ERROR_INVALID_NBR_RANDOMS"));
                MessageBox.show(bundle.getString("ERROR_INVALID_NBR_RANDOMS"), "Error");
                isValid = false;
            }
        }

        if (this.jcbMakeRandoms.isSelected()) {
            if (klet <= 0 || klet > 10) {
                this.jLblError.setText(bundle.getString("ERROR_INVALID_NBR_RANDOMS"));
                MessageBox.show(bundle.getString("ERROR_INVALID_NBR_RANDOMS"), "Error");
                isValid = false;
            }
        }

        return isValid;
    }

    /**
     * Check Internet connection
     *
     * @return True if internet is available.
     */
    private static boolean netIsAvailable() {
        try {
            String proxyConn = GenBankID.getProxyConfiguration();

            if (proxyConn.length() > 0) {
                String proxyParm[] = proxyConn.split(",");

                // defined a proxy connection
                System.setProperty("http.proxyHost", proxyParm[0].trim());
                System.setProperty("http.proxyPort", proxyParm[0] + ", "
                        + proxyParm[1]);

                System.out.println("Setting proxy with: " + proxyConn);

                // If proxy requires authentication, 
                if (proxyParm.length == 4) {
                    System.setProperty("http.proxyUser", proxyParm[2].trim());
                    System.setProperty("http.proxyPassword", proxyParm[3].trim());
                }

            }

            final URL url = new URL("http://www.google.com");
            final URLConnection conn = url.openConnection();
            conn.connect();
            conn.getInputStream().close();
            return true;
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            return false;
        }
    }

    /**
     * Start process
     */
    public void start() {

        if (this.isRunning) {
            return;
        } else {
            setIsRunning(true);
        }

        int max, min, wooble, mismatch, randoms, klet;
        pathOut = this.jTFPathOut.getText();
        pathIn = this.jTFPathIn.getText();
        String[] loops = this.jTALoopPatterns.getText().split(",");
        ArrayList<String> loopList;
        loopList = new ArrayList<>();
        //LinkedHashMap<String, DNASequence> dnaFile;

        if (!this.jTAGenes.getText().isEmpty()) {
            geneList.clear();
            String txtTemp = this.jTAGenes.getText();
            txtTemp = txtTemp.replace("\n", "").replace("\r", "");
            txtTemp = txtTemp.replace(" ", "");
            geneList.addAll(asList(txtTemp.split(",")));
        }

        // Values
        min = new Integer(this.jSpinMinLength.getValue().toString());
        max = new Integer(this.jSpinMaxLength.getValue().toString());
        wooble = new Integer(this.jSpinWooble.getValue().toString());
        mismatch = new Integer(this.jSpinMismatch.getValue().toString());
        randoms = new Integer(this.jftNumberOfRandoms.getValue().toString());
        klet = new Integer(this.jftkLet.getValue().toString());

        // Loops
        loopList.addAll(asList(loops));

        // Validar parámetros
        if (!validateParameters(min, max, wooble, mismatch, pathIn, pathOut,
                loopList, geneList, randoms, klet)) {
            setIsRunning(false);
            return;
        }

        this.jLblError.setText("");
        this.jTAConsole.setText("");

        // Start process
        loopMatcher.setBundle(bundle);
        loopMatcher.setLoopPatterns(loopList);
        loopMatcher.setAdditionalSequence(this.jftAdditionalSeq.getText().trim());
        loopMatcher.setMaxLength(max);
        loopMatcher.setMinLength(min);
        loopMatcher.setMaxMismatch(mismatch);
        loopMatcher.setMaxWooble(wooble);
        loopMatcher.setPathOut(pathOut);
        loopMatcher.setPathIn(pathIn);
        loopMatcher.setFileList(this.listOfFiles);
        loopMatcher.setIsExtendedMode(this.jcbExtended.isSelected());
        loopMatcher.setMakeRandoms(this.jcbMakeRandoms.isSelected());
        loopMatcher.setNumberOfRandoms(randoms);
        loopMatcher.setkLetRandoms(klet);
        loopMatcher.setSearchReverse(this.jcbSearchInverse.isSelected());

        // Add progress bar
        loopMatcher.setProgressBar(jProgressBar1);

        worker = new GUISwingWorker(this);

        worker.execute();
    }

    /**
     *
     * @return
     */
    public List<String> getGeneList() {
        return Collections.unmodifiableList(this.geneList);
    }

    /**
     * 
     * @param newGeneList 
     */
    @SuppressWarnings("AssignmentToCollectionOrArrayFieldFromParameter")
    public void setGeneList(ArrayList<String> newGeneList) {
        this.geneList = newGeneList;
    }

    /**
     * 
     * @return 
     */
    public JProgressBar getProgressBar(){
        return this.jProgressBar1;
    }
    
    /**
     * 
     * @return 
     */
    public JTextArea getTxtConsole() {
        return this.jTAConsole;
    }

    /**
     * 
     * @return 
     */
    public JButton getJBtnStart() {
        return this.jBtnStart;
    }

    /**
     * 
     * @return 
     */
    public LoopMatcher getLoopMatcher() {
        return this.loopMatcher;
    }

    /**
     *
     * @return
     */
    public JTabbedPane getTab1() {
        return this.jTabInput;
    }

    /**
     *
     * @return
     */
    public ResourceBundle getCurrentBundle() {
        return this.bundle;
    }

    /**
     *
     * @return
     */
    public String getPathIn() {
        return this.pathIn;
    }

    /**
     *
     * @return
     */
    public String getPathOut() {
        return this.pathOut;
    }
    
    public final boolean checkExternalFiles(){
        File f1 = new File("./ext/RNAfold.exe");
        File f2 = new File("./ext/ushuffle.exe");
        
        return f1.exists() && f2.exists();
    }
}
